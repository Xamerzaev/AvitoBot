import re
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.dispatcher.filters import Command

import asyncio

import phonenumbers

from bot_setup import dp, bot, Dispatcher
from config import MODERATOR_CHAT_ID, TELEGRAM_CHANNEL_ID
from states import AdForm, ModeratorFSM

import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

media_group_handlers = {}


@dp.message_handler(Command("cancel"), state="*")
async def process_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.", reply_markup=types.ReplyKeyboardRemove())


async def save_user_data(user_id: int, chat_id: int, data: dict, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ FSM.
    """
    await state.storage.set_data(chat=chat_id, user=user_id, data=data)


async def get_user_data(user_id: int, chat_id: int, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    return await state.storage.get_data(chat=chat_id, user=user_id)


@dp.message_handler(commands="start", state="*")
async def start(message: types.Message):
    await AdForm.waiting_for_title.set()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –°–µ–π—á–∞—Å –º—ã –ø—Ä–æ–≤–µ–¥–µ–º –≤–∞—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ "
        "—à–∞–≥–æ–≤, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."
        )


@dp.message_handler(state=AdForm.waiting_for_title)
async def ad_title(message: types.Message, state: FSMContext):

    if len(message.text) > 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
        
    elif len(message.text) < 4 or not any(char.isalpha() for char in message.text):
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É.")
        return
    
    async with state.proxy() as data:
        data['title'] = message.text
    await AdForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.")


@dp.message_handler(state=AdForm.waiting_for_description, commands='skip')
async def ad_description_skip(message: types.Message, state: FSMContext):
    await AdForm.next()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (1-10 —à—Ç—É–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):")


@dp.message_handler(state=AdForm.waiting_for_description)
async def ad_description(message: types.Message, state: FSMContext):
    if len(message.text) > 800:
        await message.reply("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    async with state.proxy() as data:
        data['description'] = message.text
    await AdForm.waiting_for_photos.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (1-10 —à—Ç—É–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):")


async def handle_media_group_photos(media_group_id: str, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
    await asyncio.sleep(2)
    async with state.proxy() as data:
        photos = media_group_handlers.pop(media_group_id, [])
        data['photos'].extend(photos)

    dispatcher = Dispatcher.get_current()
    await dispatcher.bot.send_message(data['chat_id'], "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

    await AdForm.waiting_for_price.set()


@dp.message_handler(content_types=['photo'], state=AdForm.waiting_for_photos)
async def ad_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['chat_id'] = message.chat.id
        if 'photos' not in data:
            data['photos'] = []

        media_group_id = message.media_group_id
        if media_group_id:
            if media_group_id in media_group_handlers:
                media_group_handlers[media_group_id].append(message.photo[-1].file_id)
            else:
                media_group_handlers[media_group_id] = [message.photo[-1].file_id]
                asyncio.create_task(handle_media_group_photos(media_group_id, state))
        else:
            data['photos'].append(message.photo[-1].file_id)
            if len(data['photos']) >= 10:
                await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (10).")
                await AdForm.next().set()
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
            else:
                await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done, –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏.")


@dp.message_handler(state=AdForm.waiting_for_photos, commands='done')
async def photos_done(message: types.Message, state: FSMContext):
    await AdForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")


@dp.message_handler(state=AdForm.waiting_for_price)
async def ad_price(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return

    if len(message.text) > 10:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")
        return

    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞ –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã—à–µ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    # –£–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
    if len(set(message.text)) < 3 and not message.text.isdigit():
        await message.answer("–¶–µ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏—Ñ—Ä –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ü–∏—Ñ—Ä.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é price –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ 0, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 0
    if message.text.startswith('0'):
        price = '0'
    else:
        price = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—É—é —Ü–µ–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é price
    async with state.proxy() as data:
        data['price'] = price

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await AdForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–≤—è–∑–∏ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):")


async def send_ad_for_moderation(ad_preview, markup, photos=None):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    state = Dispatcher.get_current().current_state(chat=MODERATOR_CHAT_ID, user=MODERATOR_CHAT_ID)
    await state.set_state(ModeratorFSM.waiting_for_moderation)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if photos:
        media_group = [InputMediaPhoto(photo_id) for photo_id in photos]
        await bot.send_media_group(MODERATOR_CHAT_ID, media_group)

    await bot.send_message(MODERATOR_CHAT_ID, ad_preview, reply_markup=markup)


@dp.message_handler(state=AdForm.waiting_for_contact_info)
async def ad_contact_info(message: types.Message, state: FSMContext):
    try:
        phone_number = phonenumbers.parse(message.text, "RU")
        if not phonenumbers.is_valid_number(phone_number):
            raise ValueError
    except (phonenumbers.phonenumberutil.NumberParseException, ValueError):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    async with state.proxy() as data:
        data['contact_info'] = message.text
        logger.info(f"Data saved for user {message.from_user.id}: {data}")
        await save_user_data(message.from_user.id, message.chat.id, data, state)

    ad_preview = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title')}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n–¶–µ–Ω–∞: {data.get('price')}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: {data.get('contact_info')}"
    markup = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{message.from_user.id}"),
        InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message.from_user.id}")
    )

    await send_ad_for_moderation(ad_preview, markup, photos=data.get('photos'))
    await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
                         "–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ /start",
                         reply_markup=types.ReplyKeyboardRemove())


async def publish_ad(callback_query: types.CallbackQuery, ad_data, state: FSMContext, user_id: int):
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è user_id={user_id} —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ad_data}")
        if not all(key in ad_data for key in ['title', 'price', 'contact_info']):
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è user_id={user_id}. –î–∞–Ω–Ω—ã–µ: {ad_data}")
            await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã.")
            return

        logger.debug("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
        marketing_text_parts = [
            "üåü *–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!* üåü",
            f"üì£ *{ad_data['title']}*"
        ]

        if 'description' in ad_data and ad_data['description'].strip():
            marketing_text_parts.append(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {ad_data['description']}")

        user_mention = f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user_id})"
        marketing_text_parts.extend([
            f"üí∞ –¶–µ–Ω–∞: {ad_data['price']} ‚ÇΩ",
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {ad_data['contact_info']}",
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {user_mention}"
        ])

        marketing_text = "\n\n".join(marketing_text_parts)
        logger.debug("–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")

        if 'photos' in ad_data and ad_data['photos']:
            logger.info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏...")
            media = [InputMediaPhoto(photo, caption=marketing_text if i == 0 else None, parse_mode='Markdown') for i, photo in enumerate(ad_data['photos'])]
            await bot.send_media_group(TELEGRAM_CHANNEL_ID, media)
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –¥–ª—è user_id={user_id}.")
        else:
            logger.info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
            await bot.send_message(TELEGRAM_CHANNEL_ID, marketing_text, parse_mode='Markdown')
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –¥–ª—è user_id={user_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è user_id={user_id}. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        try:
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏...")
            await bot.delete_message(MODERATOR_CHAT_ID, callback_query.message.message_id)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        await state.finish()
        user_state = Dispatcher.get_current().current_state(chat=user_id, user=user_id)
        await user_state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('approve_') or c.data.startswith('reject_'), state=ModeratorFSM.waiting_for_moderation)
async def process_ad_decision(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split('_')[1]
    action = callback_query.data.split('_')[0]
    user_state = Dispatcher.get_current().current_state(chat=user_id, user=user_id)
    ad_data = await user_state.get_data()

    if action == "approve":
        await publish_ad(callback_query, ad_data, user_state, user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º user_state –≤ publish_ad
        await bot.send_message(user_id, "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    elif action == "reject":
        await bot.send_message(user_id, "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @mahamerz")
        await user_state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
